<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>人间便利店</title>
      <link href="/2019/02/14/convenient-store/"/>
      <url>/2019/02/14/convenient-store/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正常的世界极度高压，异物会静静地被剔除，不正常的人会被逐一处理掉。<br><br>——村田沙耶香《人间便利店》</p></blockquote><center><img src="/2019/02/14/convenient-store/book.jpg" width="50%"></center><p>从绳文时代起，这个社会便注定不会以宽广的胸怀去容纳名为<code>少数派</code>的叛道者。古仓惠子就是这样一个叛道者，她是一个如《人间失格》中叶藏一般的人物，却比叶藏更为极端。</p><p>她像叶藏一般观察这身边的气氛，但却不想融入某个群体。对她来说，模仿不是一条让自己成为正常人的路，而仅仅是一堵不让外界嘈杂打扰了现有生活的墙。当家人都在想方设法去“治好”她时，她早已知道什么样子是身边人所谓的“正常”，却不知道自己为何需要被“治好”。</p><p>社会就像一个大工厂，它有着自己的一套制度，每一个不堪使用的零件都会被迅速剔除。当身边人都在忙碌的工作，你却行至中年却一直做着那份做了十八年的便利店兼职。当其他人都结婚生子你却踽踽独行，你就成为了异类，成为了这个不堪使用的零件。或者说，人类这个群体，本身就有着深埋在内心深处的恐惧基因。当自己不同于群体，就会去寻找群体的庇护。当出现新的<code>少数派</code>，就会惧怕异类的蔓延，迅速将其消灭。于是，每个人的个性被环境稀释，最终成为泥沼的一洼。</p><p>于是，惠子选择了便利店，这个不靠感性存在，而是按部就班地机械化运作的小工厂给了她安定感。也正因如此，当白羽先生闯入自己的生活，当店里众人“感性”地讨论自己的时候，她动摇了，她感觉到了感性世界对自己残酷的侵略。这是只要她作为一个“人”存在便无法避免的。</p><p>于是她选择成为了一种名为“便利店店员”的生物。</p><p>所以，辨别一个物种靠的是什么？是DNA吗？还是依靠着个体对整个群体的<code>屈服</code>呢？当一个个体昂起头，表达出对所在群体的不屑，选择另一个身份时，这就是新物种的诞生吧。</p><p>书中言之喜剧，置于生活，却处处都是悲剧。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式id生成（一）SnowFlake算法</title>
      <link href="/2019/02/13/snow-flake-algorithm/"/>
      <url>/2019/02/13/snow-flake-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在实际的生产中，我们经常会遇到id生成问题。通常，我们对id生成现象都有一个最基础的要求<code>保证id的唯一性</code>。针对这个最基础要求，经常用到的解决方案有以下几种。</p><ol><li>微软公司通用唯一识别码（UUID）</li><li>Twitter公司雪花算法（SnowFlake）</li><li>基于数据库的id自增</li><li>对id进行缓存</li></ol><p>其中，<code>使用数据库进行id自增</code>是在单机应用中使用最普遍的id生成方式，它能够完全保证id的不重复。但id的自增并不是在任何数据库都支持，这就给数据库迁移造成了麻烦。并且，数据库的解决方案在分布式环境下的只能保证单个数据库作为生成数据库，存在单点故障的危险。</p><p>而<code>微软的UUID</code>显然是一种极佳的解决方案，它由当前日期时间、时钟序列、全局唯一的机器标识号来生成一段无序的字符串id。它不仅能<strong>理论上</strong>实现id的不重复（实际id可能重复，但几率极小）。但问题又来了，我们前面说到它的id是<strong>无序的</strong>。虽然它满足了我们的基础要求，但实际很多的生产中我们还有id根据时间进行递增的进阶要求。这显然是无法实现的。</p><p>所以，在本章我们讲一下Twitter公司的雪花算法是如何进行id生成的。</p><h2 id="雪花的结构"><a href="#雪花的结构" class="headerlink" title="雪花的结构"></a>雪花的结构</h2><p>首先，我们从它的设计入手，自己想一下，如果让我们设计一个id，如何保证既能唯一又能按照时间递增？</p><p>首先，既然要按照时间递增，那么这个id一定是个数，而不是字符串。并且在id中时间要作为第一影响因素，越晚生成的id，数字越大。那么整个数字id的前几位一定是时间戳。这就实现了按照时间递增。</p><p>那么同时间的并发生成如何保证唯一性呢？我们还会想到在分布式情况下要在多台机器上生成id，那么直接再加上这台机器的id就好了。</p><p>Ok，继续思考，时间相同，在同一台机器上生成的多个id如何保证唯一性，这时候就会向，也许可以再在后面加一串随机数或者序列之类的。</p><p>想到这，就有了下面的雪花算法的结构图。</p><p><center><img src="/2019/02/13/snow-flake-algorithm/snow-flake.webp"></center></p><ul><li>整个结构是64位，所以我们在Java中可以使用long来进行存储。</li><li>1 bit是符号位，丢弃不用。</li><li>41 bits时间戳，可表示最大$$(2^{41}-1) / (1000 <em> 60 </em> 60 <em> 24 </em> 365) = 69$$,即可保证约69年内的id不重复。</li><li>10 bits的机器id，5 bits作为<code>datacenterId</code>,5 bits作为<code>workerId</code>。</li><li>12 bits的序列号，用来标识同一时间同一台机器生成的id，$$2^{12}-1 = 4095$$，即允许同一时间同台机器生成4095个id。</li></ul><p>可以看出，雪花算法生成的id既保证了唯一性，又因为是long存储，所以能够按照时间进行排序。至于69年的限制。。。。。。反正69年后公司在不在都不一定了，关我啥事。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>twitter原厂生产的实现代码是用scala写的，发布在twitter的<a href="https://github.com/twitter-archive/snowflake/blob/snowflake-2010/src/main/scala/com/twitter/service/snowflake/IdWorker.scala" target="_blank" rel="noopener">git仓库</a>中。</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">/** Copyright 2010-2012 Twitter, Inc.*/</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>service<span class="token punctuation">.</span>snowflake<span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>ostrich<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>Stats<span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>service<span class="token punctuation">.</span>snowflake<span class="token punctuation">.</span>gen<span class="token punctuation">.</span>_<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token comment" spellcheck="true">/** * An object that generates IDs. * This is broken into a separate class in case * we ever want to support multiple worker threads * per process */</span><span class="token keyword">class</span> IdWorker<span class="token punctuation">(</span><span class="token keyword">val</span> workerId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token keyword">val</span> datacenterId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> reporter<span class="token operator">:</span> Reporter<span class="token punctuation">,</span> <span class="token keyword">var</span> sequence<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token keyword">extends</span> Snowflake<span class="token punctuation">.</span>Iface <span class="token punctuation">{</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">def</span> genCounter<span class="token punctuation">(</span>agent<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    Stats<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">"ids_generated"</span><span class="token punctuation">)</span>    Stats<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">"ids_generated_%s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> exceptionCounter <span class="token operator">=</span> Stats<span class="token punctuation">.</span>getCounter<span class="token punctuation">(</span><span class="token string">"exceptions"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> log <span class="token operator">=</span> Logger<span class="token punctuation">.</span>get  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> Random  <span class="token keyword">val</span> twepoch <span class="token operator">=</span> <span class="token number">1288834974657L</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> workerIdShift <span class="token operator">=</span> sequenceBits  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span>  <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">var</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span>  <span class="token comment" spellcheck="true">// sanity check for workerId</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">></span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    exceptionCounter<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> IllegalArgumentException<span class="token punctuation">(</span><span class="token string">"worker Id can't be greater than %d or less than 0"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">></span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    exceptionCounter<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> IllegalArgumentException<span class="token punctuation">(</span><span class="token string">"datacenter Id can't be greater than %d or less than 0"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span><span class="token punctuation">,</span>    timestampLeftShift<span class="token punctuation">,</span> datacenterIdBits<span class="token punctuation">,</span> workerIdBits<span class="token punctuation">,</span> sequenceBits<span class="token punctuation">,</span> workerId<span class="token punctuation">)</span>  <span class="token keyword">def</span> get_id<span class="token punctuation">(</span>useragent<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validUseragent<span class="token punctuation">(</span>useragent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      exceptionCounter<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> InvalidUserAgentError    <span class="token punctuation">}</span>    <span class="token keyword">val</span> id <span class="token operator">=</span> nextId<span class="token punctuation">(</span><span class="token punctuation">)</span>    genCounter<span class="token punctuation">(</span>useragent<span class="token punctuation">)</span>    reporter<span class="token punctuation">.</span>report<span class="token punctuation">(</span><span class="token keyword">new</span> AuditLogEntry<span class="token punctuation">(</span>id<span class="token punctuation">,</span> useragent<span class="token punctuation">,</span> rand<span class="token punctuation">.</span>nextLong<span class="token punctuation">)</span><span class="token punctuation">)</span>    id  <span class="token punctuation">}</span>  <span class="token keyword">def</span> get_worker_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> workerId  <span class="token keyword">def</span> get_datacenter_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> datacenterId  <span class="token keyword">def</span> get_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis  <span class="token keyword">protected</span><span class="token punctuation">[</span>snowflake<span class="token punctuation">]</span> <span class="token keyword">def</span> nextId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> synchronized <span class="token punctuation">{</span>    <span class="token keyword">var</span> timestamp <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      exceptionCounter<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"clock is moving backwards.  Rejecting requests until %d."</span><span class="token punctuation">,</span> lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> InvalidSystemClock<span class="token punctuation">(</span><span class="token string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>        lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask      <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timestamp <span class="token operator">=</span> tilNextMillis<span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      sequence <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    lastTimestamp <span class="token operator">=</span> timestamp    <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>       sequence  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token keyword">def</span> tilNextMillis<span class="token punctuation">(</span>lastTimestamp<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> timestamp <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      timestamp <span class="token operator">=</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    timestamp  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token keyword">def</span> timeGen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> AgentParser <span class="token operator">=</span> <span class="token string">"""([a-zA-Z][a-zA-Z\-0-9]*)"""</span><span class="token punctuation">.</span>r  <span class="token keyword">def</span> validUseragent<span class="token punctuation">(</span>useragent<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> useragent <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> AgentParser<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token boolean">true</span>    <span class="token keyword">case</span> _ <span class="token keyword">=></span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>翻译为Java代码如下（代码来自<a href="https://segmentfault.com/a/1190000011282426" target="_blank" rel="noopener">理解分布式id生成算法SnowFlake</a>）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorker</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">,</span> <span class="token keyword">long</span> sequence<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sanity check for workerId</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">></span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"worker Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span>maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">></span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"datacenter Id can't be greater than %d or less than 0"</span><span class="token punctuation">,</span>maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span><span class="token punctuation">,</span>                timestampLeftShift<span class="token punctuation">,</span> datacenterIdBits<span class="token punctuation">,</span> workerIdBits<span class="token punctuation">,</span> sequenceBits<span class="token punctuation">,</span> workerId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sequence <span class="token operator">=</span> sequence<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> 1288834974657L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> 5L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> 12L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWorkerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> workerId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDatacenterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> datacenterId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clock is moving backwards.  Rejecting requests until %d."</span><span class="token punctuation">,</span> lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span><span class="token punctuation">,</span>                    lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token operator">|</span>                <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>                <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token operator">|</span>                sequence<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//---------------测试---------------</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IdWorker worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><p>仔细看整个代码的话，阅读起来也并不困难。首先，这些代码是运行在每台机器上的，所以datacenterId与workderId作为参数传入，我们需要解决的只是时间戳和序列的生成。</p><p>首先是时间戳的生成，时间戳生成十分简单，就是单纯取当前的系统时间</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在最后组合成id时，先执行<code>timestamp - twepoch</code>，twepoch变量是我们定义的起始的时间戳，这样可以让时间戳存储时间更久。然后再执行<code>(timestamp - twepoch) &lt;&lt; timestampLeftShift</code>进行移位。这样就取到了41位的时间戳。</p><p>然后就是序列，序列的生成直接就按照顺序递增。最初序列变量<code>sequence</code>为0。当新生成的id与上一个id的时间戳相同时，则直接让序列加一。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    sequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里要注意一点，因为序列是12 bits长度，所以当超出长度时，执行完<code>sequence = (sequence + 1) &amp; sequenceMask;</code>之后，得到的sequence为0。所以这时候进入一个循环等待一直等到时间戳变化再进行本次的id生成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的集合类-Collection系集合</title>
      <link href="/2018/10/03/collection-class/"/>
      <url>/2018/10/03/collection-class/</url>
      
        <content type="html"><![CDATA[<p>Java中的<strong>集合类</strong>主要可以分为两大体系：</p><ul><li>Collection体系</li><li>Map体系</li></ul><a id="more"></a><p>集合类中的主要继承与实现关系可以归纳为以下两图（蓝色为类，绿色为接口，红色为抽象类）</p><p><img src="/2018/10/03/collection-class/Collection类.png" alt=""></p><p><img src="/2018/10/03/collection-class/Map类.png" alt=""></p><h1 id="1">一、Collection系集合</h1><h2 id="1.1">1、List系集合</h2><h3 id="1.1.1">①List接口源码</h3><p>我们可以通过上面的图片看出，List系的集合Vector、LinkedList、ArrayListd都是对List接口的实现，我们就先打开List接口的源码,可以看出，List接口除了定义了类似add、remove等List的操作之外，还提供了sort、spliterator等的默认实现。</p><blockquote><p>从jdk8开始，java允许我们在接口中定义static方法与default方法并给出其默认实现。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>UnaryOperator<span class="token operator">&lt;</span>E<span class="token operator">></span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            li<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>Comparator<span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractList<span class="token punctuation">.</span>RandomAccessSpliterator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Spliterator<span class="token punctuation">.</span>ORDERED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutableCollections<span class="token punctuation">.</span>List0<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List1</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                                e6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                                e6<span class="token punctuation">,</span> e7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                                e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">,</span> E e9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                                e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">,</span> e9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">,</span> E e9<span class="token punctuation">,</span> E e10<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                                e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">,</span> e9<span class="token punctuation">,</span> e10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SafeVarargs</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// implicit null check of elements</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> ImmutableCollections<span class="token punctuation">.</span>List0<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List1</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>List2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>ListN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyOf</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> coll<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>coll <span class="token keyword">instanceof</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>AbstractImmutableList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span>coll<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里仅简单讲一下List接口中对排序的实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>Comparator<span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    ListIterator<span class="token operator">&lt;</span>E<span class="token operator">></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，List的sort方法主要是先将List元素转换为数组，然后调用Arrays的sort方法实现的，我们再进入Arrays的sort方法看一下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LegacyMergeSort<span class="token punctuation">.</span>userRequested<span class="token punctuation">)</span>            <span class="token function">legacyMergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            TimSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> c<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>曾经遇到过一个面试题，问的是java默认的排序方式是什么，当初回答的是<strong>快速排序</strong>，但在这里可以看到，它使用的主要是<strong>TimSort</strong>,至于什么是TimSort，我们在这里可以看作一种基于归并排序和插入排序的混合排序方式，其主要的算法实现我们在之后的文章中再作叙述。</p><h3 id="1.1.2">②ArrayList源码</h3><p>从ArrayList的源码可以看出，当我们初始化ArrayList时，若未对ArrayList进行容量的初始化，默认的ArrayList大小为10。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** Default initial capacity.*/</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>在ArrayList中，使用elementData数组保存存入ArrayList中的数据，使用size存储当前存入数据的数量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// non-private to simplify nested class access</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span></code></pre><p>ArrayList的初始化有多种方式，我们先就以下这种初始化方法进行分析</p><pre class=" language-Java"><code class="language-Java">public ArrayList(int initialCapacity) {        if (initialCapacity > 0) {            this.elementData = new Object[initialCapacity];        } else if (initialCapacity == 0) {            this.elementData = EMPTY_ELEMENTDATA;        } else {            throw new IllegalArgumentException("Illegal Capacity: "+                                               initialCapacity);        }    }</code></pre><p>这时一种比较简单的初始化方式，只需要在初始化时为ArrayList设置初始大小。然后elementData对象就会初始化为该大小的数组。当initialCapacity为0时，就会直接使用预先初始化好的一个空数组将elementData进行初始化操作。</p><h4 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h4><p>在我们添加的数据超出elementData的大小时，就需要对elementData进行动态扩容，而动态扩容的操作自然是发生在add方法中。</p><pre class=" language-Java"><code class="language-Java">public boolean add(E e) {    ensureCapacityInternal(size + 1);  // Increments modCount!!    elementData[size++] = e;    return true;}</code></pre><p>可以看到，在添加数据前，执行了ensureCapacityInternal方法，其目的是检测当前的数据数量是否超过数组大小，如果超过，则进行扩容。其主要判断代码如下。</p><pre class=" language-Java"><code class="language-Java">private static int calculateCapacity(Object[] elementData,int minCapacity) {    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA){        return Math.max(DEFAULT_CAPACITY, minCapacity);    }    return minCapacity;}private void ensureCapacityInternal(int minCapacity) {    ensureExplicitCapacity(calculateCapacity(elementData,minCapacity));}private void ensureExplicitCapacity(int minCapacity) {    modCount++;    // overflow-conscious code    if (minCapacity - elementData.length > 0)        grow(minCapacity);}</code></pre><p>可以看到，在我们判断到容量超过数组大小时，又调用了grow方法进行扩容操作。</p><pre class=" language-Java"><code class="language-Java">private void grow(int minCapacity) {    // overflow-conscious code    int oldCapacity = elementData.length;    int newCapacity = oldCapacity + (oldCapacity >> 1);    if (newCapacity - minCapacity < 0)        newCapacity = minCapacity;    if (newCapacity - MAX_ARRAY_SIZE > 0)        newCapacity = hugeCapacity(minCapacity);    // minCapacity is usually close to size, so this is a win:    elementData = Arrays.copyOf(elementData, newCapacity);}</code></pre><p>可以看到，在进行扩容时，执行的操作是<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>，其实际意义上相当于是<code>int newCapacity = oldCapacity * 1.5;</code>。也就是每次扩容就讲数组的最大容量设置为原容量的1.5倍。</p><p>即在默认容量为10的基础上，插入第11个数据时，容量扩大为15.在插入第16个数据时，容量扩大为22。</p><h3 id="1.1.3">③LinkedList源码</h3><p>LinkedList的实现主要依赖双向链表，LinkedList记录链表的头节点与尾节点,同样使用size记录当前链表中的节点数量。</p><pre class=" language-Java"><code class="language-Java">transient int size = 0;transient Node<E> first;transient Node<E> last;private static class Node<E> {    E item;    Node<E> next;    Node<E> prev;    Node(Node<E> prev, E element, Node<E> next) {        this.item = element;        this.next = next;        this.prev = prev;    }}</code></pre><p>而由于LinkedList不存在动态扩容问题，故其add方法也是传统的链表节点的增添操作。</p><pre class=" language-Java"><code class="language-Java">public boolean add(E e) {    linkLast(e);    return true;}void linkLast(E e) {    final Node<E> l = last;    final Node<E> newNode = new Node<>(l, e, null);    last = newNode;    if (l == null)        first = newNode;    else        l.next = newNode;    size++;    modCount++;}</code></pre><h3 id="1.1.4">④Vector源码</h3><p>Vector的源码实现与ArrayList相差不大，它和ArrayList的差别主要体现再两个方面：</p><ol><li><p>Vector中对增删等操作均进行了线程同步处理（添加synchronized修饰符）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span> modCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> elementCount<span class="token punctuation">)</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>在Vector中的扩容操作，相对应的操作是<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>,每次扩容为原本的1.5倍。而Vector中的扩容则是<code>int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?capacityIncrement : oldCapacity);</code>，即如果指定了增长量，则扩容相应的增长量大小，否则，则扩容为原来的两倍。</li></ol><h3 id="1.1.5">⑤线程安全性</h3><p>无论是ArrayList还是LinkedList都是线程不安全的。</p><p>对于ArrayList来说，在进行多线程操作添加数据时，可能会出现如下情况：</p><p>（1）ArrayList中已添加了9个数据，此时未进行过扩容，最大存入10个数据，size变量为9.</p><p>（2）A线程进行判断，判断结果还有可插入的空间，无需进行扩容。同时B线程也进行了判断，判断结果也是不需要扩容。</p><p>（3）A线程数据进行了插入size位置，此时空间满，size更改为10。</p><p>（4）B线程进行插入操作，插入size位置，但由于未进行扩容，故不存在下标为10的空间，插入操作越界，插入失败。</p><p>LinkedList同样时如此，当进行add操作时，可能存在两个线程中添加的数据指向的prev节点为同一个节点的情况。初次之外，LinkedList的其他操作也存在类似问题。</p><p>使用线程安全的List主要有以下两个方法：</p><p>（1）使用synchronized关键字进行限制。</p><p>（2）使用Collections.synchronizedList()，如下</p><pre class=" language-Java"><code class="language-Java">List<Map<String,Object>> data=Collections.synchronizedList(new ArrayList<Map<String,Object>>());</code></pre><p>而Vector则是线程安全的，它的线程安全主要是由于它的synchronized修饰原因，但也因为强制进行同步，所以它的性能相较于线程不安全的ArrayList较差。</p><p>但如果我们要实现线程安全的存储，到底是Vector性能更高，还是Collections.synchronizedList处理后的ArrayList性能更高呢？</p><p>我们之前看了Vector，它与ArrayList的区别就是在方法上加锁，我们再来看一下Collections.synchronizedList。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">synchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">?</span>            <span class="token keyword">new</span> <span class="token class-name">SynchronizedRandomAccessList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">:</span>            <span class="token keyword">new</span> <span class="token class-name">SynchronizedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出它返回的是一个SynchronizedList对象，我们再进入SynchronizedList的实现中看一下。</p><pre class=" language-java"><code class="language-java"><span class="token function">SynchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">SynchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">,</span> Object mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，SynchronizedList进行的是一种类似代理的委托服务，实际依旧是调用我们传进来的List的方法，只不过在它的外层进行了<strong>代码块</strong>的加锁。而Vector是进行的是<strong>方法</strong>的加锁。</p><p>因为有了这一层的委托加锁，所以Vector的效率会略高于Collections.synchronizedList处理后的ArrayList。</p><h2 id="1.2">2、Set系集合</h2><h3 id="1.2.1">①Set接口源码</h3><p>相较于List接口，Set接口的区别不大，仅仅是没有了sort等方法，我们也可以看到，Set作为无重复的集合，对重复元素的判断等操作也是交给子类来实现的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Spliterator<span class="token punctuation">.</span>DISTINCT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutableCollections<span class="token punctuation">.</span>Set0<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>Set1</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>Set2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                               e6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                               e6<span class="token punctuation">,</span> e7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                               e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">,</span> E e9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                               e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">,</span> e9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">,</span> E e3<span class="token punctuation">,</span> E e4<span class="token punctuation">,</span> E e5<span class="token punctuation">,</span> E e6<span class="token punctuation">,</span> E e7<span class="token punctuation">,</span> E e8<span class="token punctuation">,</span> E e9<span class="token punctuation">,</span> E e10<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span>                                               e6<span class="token punctuation">,</span> e7<span class="token punctuation">,</span> e8<span class="token punctuation">,</span> e9<span class="token punctuation">,</span> e10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SafeVarargs</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"varargs"</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>E<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// implicit null check of elements</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> ImmutableCollections<span class="token punctuation">.</span>Set0<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>Set1</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>Set2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>SetN</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Set<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyOf</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> coll<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>coll <span class="token keyword">instanceof</span> <span class="token class-name">ImmutableCollections<span class="token punctuation">.</span>AbstractImmutableSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span>coll<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span>Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过最上面的图我们可以看出，Set接口的最终实现类中都包含了对AbstractSet的继承，而通过源码我们可以看到在AbstractSet类中仅仅完成的是对equals、hashcode、removeAll方法的实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> unused<span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> i <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        E obj <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span>            h <span class="token operator">+=</span> obj<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> modified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object e <span class="token operator">:</span> c<span class="token punctuation">)</span>            modified <span class="token operator">|=</span> <span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> i <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                modified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> modified<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1.2.2">②TreeSet源码</h3><p>通过图我们可以看到，TreeSet除了继承AbstractSet之外，还实现了NavigableSet接口，而NavigableSet接口继承了SortedSet接口。</p><blockquote><p>以此扩展，直接看第二张图中的Map系集合，其中的TreeMap除了继承AbstractMap之外，还实现了NavigableMap接口，而NavigableMap接口继承了SortedMap接口。</p></blockquote><p>先说以下SortedSet接口，其中提供的我们需要实现的方法有以下几个：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SortedSet提供的方法：</span><span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自己定义比较器，对内部元素排序</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个元素</span><span class="token function">headSet</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//e之前的元素，不包括e</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最后一个元素</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Java8新增，生成Spliterator接口，有点类似nio里的selector</span><span class="token function">subSet</span><span class="token punctuation">(</span>E e1<span class="token punctuation">,</span> E e2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//e1和e2之间的元素</span><span class="token function">tailSet</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//e之后的元素，包括e</span></code></pre><p>简单说，SortedSet的作用就是告诉我们要实现排序的Set需要实现的方法。</p><p>而NavigableSet，则在SortedSet的基础上拓展了很多用于方便查询的方法，在这里就不做赘述。</p><p>仔细看一下TreeSet的源码，首先是初始化和比较：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">TreeSet</span><span class="token punctuation">(</span>NavigableMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">TreeSet</span><span class="token punctuation">(</span>Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没错，TreeSet的实现实际上并不是本身存在另类的代码，而是仅仅调用了TreeMap来进行存储，在TreeSet内部构建了一个NavigableMap的实例(TreeMap是NavigableMap的实现类)，所有的增删操作都是对这个TreeMap进行的操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> NavigableMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> m<span class="token punctuation">;</span></code></pre><p>这时候我们有一个问题了，我们都知道Map集合是存在key/value结构的，既然TreeSet不存在key/value的概念，那么是怎么使用TreeMap进行存储的呢？</p><p>相信大家也都想到了，Set中的值不允许重复，而Map的key也不允许重复，那么直接将Set的值作为Map的key进行存储即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">==</span>PRESENT<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Use linear-time version if applicable</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        c <span class="token keyword">instanceof</span> <span class="token class-name">SortedSet</span> <span class="token operator">&amp;&amp;</span>        m <span class="token keyword">instanceof</span> <span class="token class-name">TreeMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SortedSet<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> set <span class="token operator">=</span> <span class="token punctuation">(</span>SortedSet<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>        TreeMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token punctuation">(</span>TreeMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> m<span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cc <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> mc <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cc<span class="token operator">==</span>mc <span class="token operator">||</span> <span class="token punctuation">(</span>cc <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">addAllForTreeSet</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1.2.3">③HashSet源码</h3><p>相信看完TreeSet，大家心里也有了些B数，没错，HashSet的实现与TreeSet类似，HashSet也在内部有一个HashMap实例，增删操作依旧是对HashMap的操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里还有一个有趣的地方，就是当我们在初始化时在后方再加一个boolean的参数时，其构建的就会默认为构建LinkedHashMap实例。</p><pre class=" language-java"><code class="language-java"><span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span><span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没错，从代码中可以看出来，这个boolean参数为true还是false都卵用没有，它只是用来标记的。</p><h3 id="1.2.4">④LinkedHashSet源码</h3><p>同样，LinkedHashSet也是对HashMap进行的操作，这时，我们刚才提到的方法就起了作用了，由于LinkedHashSet继承自HashSet，所以在初始化时，可以直接调用刚才讲到的HashSet的初始化方法来构建LinkedHashMap对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">LinkedHashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当然，除了这四个初始化方法之外，LinkedHashSet中也只有一个spliterator方法了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Spliterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Spliterators<span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Spliterator<span class="token punctuation">.</span>DISTINCT <span class="token operator">|</span> Spliterator<span class="token punctuation">.</span>ORDERED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以我个人认为，相较于实用价值，LinkedHashSet的象征价值更高，因为它的所有功能在HashSet中都已经实现了，所以它的意义更大程度上在于让开发者用的更顺心，提高代码可读性。</p><h3 id="1.2.5">⑤线程安全性</h3><p>我们提到的这几个Set集合都不是线程安全的，它的线程安全性与其相对应的Map集合相关，同样我们可以使用Collections.synchronizedSet来实现线程安全的Set，但其也同样是以委托的方式添加synchronized锁，故效率较低。</p><h2 id="1.3">3、Queue系集合</h2><h3 id="1.3.1">①Queue接口源码</h3><p>其实我们在集合类中能够用到的队列集合不多，队列集合大多数都是在并发包下的阻塞队列中。我们先来看一下Queue的源码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出，单纯Queue接口的源码中仅仅是定义了我们基于数据结构层次理解的队列的方法，而更多的拓展则是在Deque接口中。（并发包下的阻塞队列并不实现Deque，而是继承AbstractQueue，AbstractQueue再实现Queue，可以说并发包下的阻塞队列是更纯粹的队列实现）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Deque</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果说Queue是基于数据结构订立的接口，那么Deque就是基于现实的存储集合来订立的接口，它并不是传统的队列，而是定义了双向队列，我们可以从左端添加弹出，也可以从右端。</p><h3 id="1.3.2">②LinkedList中的Deque实现</h3><p>这时候我们想一下什么集合符合Deque的标准？</p><p>没错，LinkedList，从上面的图也可以看出，LinkedList也实现了Seque的接口，所以说，LinkedList实际上也可以作为一个双向队列。</p><p>我们也可以很简单的从LinkedList中找到它对Deque的接口的实现。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerFirst</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的动态代理与静态代理</title>
      <link href="/2018/09/02/java-proxy/"/>
      <url>/2018/09/02/java-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>在现实生活中，我们如果想要卖房，大都不会去自己亲自去跑业务、找买主、谈买卖，而是会找一些第三方的中介，由中介为我们处理卖房前后的一些事务，这个“中介”就是我们的代理人，在代码中，我们很多时候也经常不想让执行的对象直接去处理某些业务逻辑，故使用到了<strong>代理</strong>。</p><a id="more"></a><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>代理的使用有三大要素：<strong>共同接口</strong>、<strong>真实对象</strong>、<strong>代理对象</strong>。例如，我们想实现一个输出功能，并在输出前后打印出日志，我们可以这样写。</p><p>首先，定义一个共同接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们再让一个类对这个接口进行实现，作为真实对象：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealObject</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>很明显，我们想让这个真实对象专注于进行输出功能，所以日志打印的功能对它来说就是重复、冗余的了，这时我们可以再定义一个类，作为代理对象，同样实现Action接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyObject</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> RealObject realObject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyObject</span><span class="token punctuation">(</span>RealObject realObject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>realObject <span class="token operator">=</span> realObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"开始执行输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realObject<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"输出结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，代理对象在这里做的主要是在内部维护一个真实对象，并对真实对象的前后进行拦截，当然我们也可以在代理对象的相应方法中对真实对象的返回值进行一系列的业务操作。</p><p>我们在使用时可以直接执行ProxyObject对象中的exec()。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ProxyObject proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理能够让我们很方便的进行统一化管理，但很多时候静态代理并不能满足我们的需求。例如，如果我们有一个卖车方法sellCar(),也有一个卖房方法sellHouse()，我们想让代理在卖车和卖房前后都加上开始卖和结束卖的提示，我们就需要在代理类中这样处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHuman</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> RealSeller realSeller<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyHuman</span><span class="token punctuation">(</span>RealSeller realSeller<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>realSeller <span class="token operator">=</span> realSeller<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSeller<span class="token punctuation">.</span><span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellerHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSeller<span class="token punctuation">.</span><span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>很明显，分别在代理类中定义两个方法是非常冗余的，而且这还是理想状态，当我们想让代理类代理的不再是实现一个接口的一个类的不同方法，而是实现不同接口的不同类的不同方法，这会使我们的业务量指数增加。</p><p>这时，java给我们提供了动态代理的方案，而动态代理又分为jdk动态代理和CGLib动态代理。</p><h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><p>jdk动态代理是java原生提供给我们的动态代理解决方案，其创建的代理类在程序运行到调用代理类对象的时候才被jvm动态创建，jvm会动态创建一个class文件，并通过代理类对象进行执行。我们只需要专注于其前后调用与预处理即可。</p><p>同样，我们需要事先创建一个共同接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后实现一个真实对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSeller</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在卖车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在卖房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在我们创建代理类时，就不是事先共同接口了，而是实现一个InvocationHandler接口来事先动态代理功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHuman</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">bind</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个新的代理目标，分别传入类、类加载器与接口信息</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result<span class="token operator">=</span>null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token operator">=</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中invoke是InvocationHandler提供的需要我们进行实现的方法，在其中我们可以专注于其前后业务的拦截，不需要在意具体传入的到底是什么类对象。</p><p>这时我们进行调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        RealSeller realSeller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSeller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyHuman proxyHuman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyHuman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Action action <span class="token operator">=</span> <span class="token punctuation">(</span>Action<span class="token punctuation">)</span> proxyHuman<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>realSeller<span class="token punctuation">)</span><span class="token punctuation">;</span>        action<span class="token punctuation">.</span><span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        action<span class="token punctuation">.</span><span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果如下</p><pre class=" language-consule"><code class="language-consule">开始卖正在卖车结束卖开始卖正在卖房结束卖</code></pre><p>因为我们的动态代理类无视了传入的类，故任意实现接口的类均可传入其中进行此前后业务的拦截。</p><h3 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h3><p>如果说jdk动态代理是针对方法进行代理，那么CGLib动态代理就是针对类进行动态代理。它的实现原理是动态生成一个子类，然后用我们的前后拦截的逻辑去覆盖原本的业务方法。因为其原理为继承，所以不能对final修饰的类进行代理。</p><p>在那之前，因为CGLib并不是java库原生提供给我们的动态代理方案，所以我们在创建代理之前先要导入jar包或者在maven中添加依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;cglib&lt;/groupId&gt;    &lt;artifactId&gt;cglib&lt;/artifactId&gt;    &lt;version&gt;3.2.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>CGLib的优势在于不用创建接口，直接创建类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RealSeller</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在卖车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在卖房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建代理类时要实现的是MethodInterceptor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ProxyHuman</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建加强器，用来创建动态代理类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//为加强器指定要代理的业务类（即：为下面生成的代理类指定父类）</span>        <span class="token comment" spellcheck="true">//设置回调：对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实现intercept()方法进行拦</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建动态代理类对象并返回</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现回调方法</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用业务类（父类中）的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束卖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在调用的时候我们实际上是新建了一个由动态代理包装过的子类对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        RealSeller realSeller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSeller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyHuman proxyHuman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyHuman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RealSeller realSeller1 <span class="token operator">=</span> <span class="token punctuation">(</span>RealSeller<span class="token punctuation">)</span> proxyHuman<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>realSeller<span class="token punctuation">)</span><span class="token punctuation">;</span>        realSeller1<span class="token punctuation">.</span><span class="token function">sellCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSeller1<span class="token punctuation">.</span><span class="token function">sellHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果同样是</p><pre class=" language-consule"><code class="language-consule">开始卖正在卖车结束卖开始卖正在卖房结束卖</code></pre><h2 id="Spring中的动态代理"><a href="#Spring中的动态代理" class="headerlink" title="Spring中的动态代理"></a>Spring中的动态代理</h2><p>众所周知，Spring中的AOP特性是基于动态代理实现的，其主要遵循以下几点：</p><ol><li>默认使用jdk动态代理</li><li>未实现接口的类需要导入外部包来使用CGLib动态代理</li><li>也可强制使用配置文件指定使用CGLib动态代理</li></ol><blockquote><p>参考文章<br><a href="https://www.cnblogs.com/ygj0930/p/6542259.html" target="_blank" rel="noopener">Java动态代理之jdk和CGLib的实现</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的锁(二)AQS</title>
      <link href="/2018/09/02/java-lock-aqs/"/>
      <url>/2018/09/02/java-lock-aqs/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>在我们上一章中，我们可以看到FairSync与NonfairSync均继承自Sync，而Sync又继承了<strong>AbstractQueuedSynchronizer</strong>，在这一章，我们就主要了解一下AbstractQueuedSynchronizer的相关内容。本章在讲解AQS的同时也会对<strong>共享锁\互斥锁</strong>、<strong>可重入锁</strong>、<strong>乐观锁\悲观锁</strong>进行讲解。</p><a id="more"></a><h2 id="二、AQS"><a href="#二、AQS" class="headerlink" title="二、AQS"></a>二、AQS</h2><p>AQS，全称为AbstractQueuedSynchronizer，可以将其翻译为“抽象队列同步器”。它本身是一个抽象类，定义了一系列的多线程访问共享资源的框架，供其子类进行相应实现。子类通过继承此抽象类并实现其抽象方法来实现线程同步。</p><h3 id="2-1-State"><a href="#2-1-State" class="headerlink" title="2.1 State"></a>2.1 State</h3><p>我们查看AQS的源码，可以找到很多与state有关的操作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state <span class="token operator">=</span> newState<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> STATE<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>state使用关键字volatile修饰，以保证其内存可见性。state可以说是一个资源获取状态的标识符，当state&gt;0时，表示资源处于被获取状态，也就是上锁状态，state=0时表示资源处于可获取状态，即锁被释放。</p><p>这里要说明一下，compareAndSetState是一种CAS操作，CAS的标准情况是Unsafe类下的compareAndSwap(V,E,N)，V为变量，E为期望值，N为新值，期望值在执行CAS操作前从V中取出，执行CAS操作时，若V的值就是E，则将V赋值为N，若V的值不为E，则表示V的值已经被其他线程修改，则取消本次操作，可以使用循环再次获取E发起一次CAS。而在jdk9中，java摒弃了Unsafe，采用了VarHandle（变量句柄）作为代替，其CAS操作与Unsafe相似，均为native修饰符修饰。CAS操作主要保证了变量的原子性。</p><h2 id="三、共享锁与独占锁"><a href="#三、共享锁与独占锁" class="headerlink" title="三、共享锁与独占锁"></a>三、共享锁与独占锁</h2><p><strong>独占锁</strong>，顾名思义，就是只能有一个线程持有的锁，其主要代表有ReentrantLock。</p><p><strong>共享锁</strong>，则允许多个线程同时持有锁，例如ReadWriteLock。</p><p>独占锁是一种典型的<strong>悲观锁</strong>，所谓悲观锁就是悲观的认为每次对加锁对象的访问都会造成读写冲突，于是只允许同时对加锁对象进行一个读操作或一个写操作。</p><p>而共享锁属于<strong>乐观锁</strong>，所谓乐观锁就是乐观的认为每次对加锁对象的访问不会造成读写冲突，所以允许多个线程同时对对象进行访问，它只在必要的时候进行相应的判断，如在更新变量的时候查看是否其他线程对变量进行了修改（具体类似于之前说的CAS操作，CAS也是一种乐观锁的实现）。所以它同时允许进行一个写操作或多个读操作。</p><p>悲观锁与乐观锁不仅用于java的并发中，也用在数据库的操作中，在这里就不多解释。</p><h3 id="3-1-AQS中的独占锁"><a href="#3-1-AQS中的独占锁" class="headerlink" title="3.1 AQS中的独占锁"></a>3.1 AQS中的独占锁</h3><p>在AQS中，对锁来说，获取锁是一个重要的操作，下面是AQS中对于独占模式获取锁的底层实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个之前我们有过分析，使用tryAcquire进行获取锁的操作，如果未获取到，则向同步队列中添加一个独占锁节点。Node就是在AQS中定义的同步队列的节点，其有两种模式，EXCLUSIVE和SHARED，其中EXCLUSIVE对应的就是独占节点。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们打开tryAcquire方法，发现是直接抛出错误，这是因为tryAcquire方法需要我们在继承的子类中进行重写的，其中需要我们自行定义获取锁的逻辑，例如ReentrantLock中对于tryAcquire方法进行了如下重写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>主要是通过判断state的值来重写的获取逻辑。</p><p><strong>这里要说明一点，为什么tryAcquire这个方法在AQS中要抛出错误，然后让子类重写，而不是直接将其设置为抽象方法让子类实现呢。这是因为之前讲过，AQS的具体实现中有独占锁也有共享锁，独占锁只需要实现tryAcquire和tryRelease，共享锁只需要实现tryAcquireShared和tryReleaseShared，若设置为抽象方法，那其子类无论是独占锁还是共享锁，都需要实现这四种方法。</strong></p><p>同样，有了获取锁，也就有释放锁，释放独占锁的底层实现是</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中unparkSuccessor方法的作用是唤醒处于等待状态，位于等待队列的下一个线程。</p><p>tryRelease方法也是与tryAcquire一样交给子类重写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在ReentrantLock中对tryRelease的重写如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-AQS中的共享锁"><a href="#3-2-AQS中的共享锁" class="headerlink" title="3.2 AQS中的共享锁"></a>3.2 AQS中的共享锁</h3><p>了解了独占锁之后，再去了解共享锁也就简单多了。</p><p>共享锁获取锁的底层实现主要除了acquireShared之外涉及两个方法,这里要注意，其判断标准与独占锁不同，独占锁因为在释放锁之后state为0，所以使用!tryAcquire()来判断，共享锁因为可以进行一次写操作或者进行多个读操作，多以在获取锁的时候要进行读锁与写锁的判断，不能获取到锁就返回-1，故用是否小于0来判断获取锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中tryAcquireShared与独占锁类似，都是交给子类来实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在可重入读写锁中，对其的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若当前写锁有其他线程占用，则获取锁失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始获取读锁</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span>        <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span>                rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> LockSupport<span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而doAcquireShared方法做的只是添加节点的功能，这里就不在赘述了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="是否独占锁的state最大为1？（可重入锁）"><a href="#是否独占锁的state最大为1？（可重入锁）" class="headerlink" title="是否独占锁的state最大为1？（可重入锁）"></a>是否独占锁的state最大为1？（可重入锁）</h3><p>虽然独占锁同时只允许一个线程进行操作，但其实际上state最大并不一定是1。</p><p>这就涉及到了一个<strong>可重入锁</strong>的概念，作为可重入锁，在资源锁释放之前，如果持有锁的线程再次对资源进行申请，可重入锁会判断申请的线程是否为当前持有锁的线程，如果是，则允许该线程对资源再次进行访问，此时，执行了两次获取锁，尚未进行释放锁，state的值就为2，多次重新申请会使state增大。</p><p>在释放锁时，进行过几次lock就需要进行几次unlock，直到state重置为0。我们之前讲的ReentrantLock的直接翻译就是可重入锁。</p><p>在网上可以找到一个可重入锁的简单范例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Thread  lockedBy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">int</span> lockedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isLocked <span class="token operator">&amp;&amp;</span> lockedBy <span class="token operator">!=</span> thread<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isLocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        lockedCount<span class="token operator">++</span><span class="token punctuation">;</span>        lockedBy <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lockedBy<span class="token punctuation">)</span><span class="token punctuation">{</span>            lockedCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lockedCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>参考文章<br><a href="https://www.cnblogs.com/daydaynobug/p/6752837.html" target="_blank" rel="noopener">Java并发之AQS详解</a><br><a href="https://blog.csdn.net/wojiushiwo945you/article/details/42292999" target="_blank" rel="noopener">Java并发-独占锁与共享锁</a><br><a href="https://www.cnblogs.com/dj3839/p/6580765.html" target="_blank" rel="noopener">可重入锁与不可重入锁</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> Java源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的锁(一)公平锁与非公平锁</title>
      <link href="/2018/09/01/java-fair-lock/"/>
      <url>/2018/09/01/java-fair-lock/</url>
      
        <content type="html"><![CDATA[<p>在很多程序语言以及中间件中都存在“锁”的概念，在Java中同样根据不同的特性有不同的锁，其中我们常见的锁有以下几类：<br><a id="more"></a></p><ul><li>公平锁/非公平锁</li><li>可重入锁</li><li>独享锁/共享锁</li><li>互斥锁/读写锁</li><li>乐观锁/悲观锁</li><li>分段锁</li><li>偏向锁/轻量级锁/重量级锁</li><li>自旋锁</li></ul><h3 id="一、Lock与syncronized"><a href="#一、Lock与syncronized" class="headerlink" title="一、Lock与syncronized"></a>一、Lock与syncronized</h3><p>在jdk1.5之前，我们实现锁机制大多数情况下都是使用syncronized关键字，在jdk1.5之后，java引入了Lock机制，以修补syncronized存在的问题与缺陷。</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">syncronized</th><th style="text-align:left">Lock</th></tr></thead><tbody><tr><td style="text-align:center">存在层次</td><td style="text-align:left">Java的关键字，在jvm层次上</td><td style="text-align:left">类</td></tr><tr><td style="text-align:center">锁的释放</td><td style="text-align:left">1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td style="text-align:left">在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td style="text-align:center">锁的获取</td><td style="text-align:left">假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td style="text-align:left">分情况而定，Lock有多个锁获取的方式</td></tr><tr><td style="text-align:center">锁状态</td><td style="text-align:left">无法判断</td><td style="text-align:left">可以判断</td></tr><tr><td style="text-align:center">锁类型</td><td style="text-align:left">可重入 不可中断 非公平</td><td style="text-align:left">可重入 可判断 可公平（两者皆可）</td></tr><tr><td style="text-align:center">性能</td><td style="text-align:left">少量同步</td><td style="text-align:left">大量同步</td></tr></tbody></table><h3 id="二、公平锁-非公平锁"><a href="#二、公平锁-非公平锁" class="headerlink" title="二、公平锁/非公平锁"></a>二、公平锁/非公平锁</h3><p><strong>公平锁</strong>顾名思义就是对每一个线程进行锁的分配时，在优先级上都持有比较公平的分配策略的锁，当线程在请求资源时，如果资源被其他线程占用，则将此线程挂起，置入请求队列中，在资源的锁被释放时，激活请求队列的头部线程，让他对资源进行操作。</p><p><strong>非公平锁</strong>相较于公平锁具有更高的效率，在线程请求资源时，如果资源被占用，同样是将线程挂起置入请求队列，但当资源锁被释放时，如果恰好有新的线程对资源发起请求，则优先让新线程对资源进行操作，不去查找请求队列，这样就节省了切换上下文的开销。</p><p>公平锁与非公平锁的创建方式:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个非公平锁，默认是非公平锁</span>Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个公平锁，构造传参true</span>Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们先实现一个公平锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        TestRes testRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t4<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t5<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> TestRes testRes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLockTest</span><span class="token punctuation">(</span>TestRes testRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>testRes <span class="token operator">=</span> testRes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            testRes<span class="token punctuation">.</span><span class="token function">resMethod</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestRes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resMethod</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行后的输出如下</p><pre class=" language-consule"><code class="language-consule">/app/jdk-10.0.2/bin/java -javaagent:/app/idea-IU-182.4129.33/lib/idea_rt.jar=37233:/app/idea-IU-182.4129.33/bin -Dfile.encoding=UTF-8 -classpath /home/jacatch/IdeaProjects/JavaLock/out/production/JavaLock MainPicked up _JAVA_OPTIONS:   -Dawt.useSystemAAFontSettings=gasp线程1获取了锁线程2获取了锁线程1释放了锁线程2释放了锁线程3获取了锁线程3释放了锁线程4获取了锁线程4释放了锁线程5获取了锁线程5释放了锁线程1获取了锁线程1释放了锁线程2获取了锁Process finished with exit code 130 (interrupted by signal 2: SIGINT)</code></pre><p>可以看出，锁的获取与释放都是按照发起请求的顺序。接下来我们对代码进行修改，实现一个非公平锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        TestRes testRes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLockTest t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockTest</span><span class="token punctuation">(</span>testRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t4<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t5<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//线程太少，为了模拟，增加时长</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> TestRes testRes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLockTest</span><span class="token punctuation">(</span>TestRes testRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>testRes <span class="token operator">=</span> testRes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            testRes<span class="token punctuation">.</span><span class="token function">resMethod</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestRes</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置为false</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resMethod</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时的运行结果如下</p><pre class=" language-consule"><code class="language-consule">/app/jdk-10.0.2/bin/java -javaagent:/app/idea-IU-182.4129.33/lib/idea_rt.jar=43359:/app/idea-IU-182.4129.33/bin -Dfile.encoding=UTF-8 -classpath /home/jacatch/IdeaProjects/JavaLock/out/production/JavaLock MainPicked up _JAVA_OPTIONS:   -Dawt.useSystemAAFontSettings=gasp线程1获取了锁线程2获取了锁线程1释放了锁线程2释放了锁线程3获取了锁线程3释放了锁线程4获取了锁线程4释放了锁线程1获取了锁线程1释放了锁线程5获取了锁Process finished with exit code 130 (interrupted by signal 2: SIGINT)</code></pre><p>我们可以看到，在4释放锁之后，并不是5获取了锁，而是1，因为此时1发起请求，5正挂起在等待队列中，非公平锁优先将资源给了线程1。</p><p>以上两个例子详细展示了公平锁与非公平锁的区别，我们再来深入研究一下在ReentrantLock中是如何实现公平锁与非公平锁的。</p><h4 id="2-1、ReentrantLock中的FairSync与NonfairSync"><a href="#2-1、ReentrantLock中的FairSync与NonfairSync" class="headerlink" title="2.1、ReentrantLock中的FairSync与NonfairSync"></a>2.1、ReentrantLock中的FairSync与NonfairSync</h4><p>我们打开java的源代码，找到ReentrantLock的构造方法，可以看到如下代码</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>在此我们可以看出，在ReentrantLock中的公平性与非公平性分别是由FairSync与NonfairSync两个方法实现的。</p><h5 id="2-1-1、NonfairSync"><a href="#2-1-1、NonfairSync" class="headerlink" title="2.1.1、NonfairSync"></a>2.1.1、NonfairSync</h5><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们可以看出，jdk中对NonfairSync的定义主要是对Sync的继承，所以我们再来看Sync的源代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5179523762034025860L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        *获取非公平锁，直接将非公平锁的获取在Sync中进行实现        */</span>        <span class="token annotation punctuation">@ReservedStackAccess</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *释放锁        */</span>        <span class="token annotation punctuation">@ReservedStackAccess</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            booleadengdain free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> free<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *判断当前线程是否为锁的持有者        */</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ConditionObject <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *获取锁的持有者线程        */</span>        <span class="token keyword">final</span> Thread <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *返回当前线程status的状态，如果持有锁就读取status，没有就0        */</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        *判断是否上锁        */</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Reconstitutes the instance from a stream (that is, deserializes it).         */</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reset to unlocked state</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在这里我们并没有找到lock()方法，我们在ReentrantLock中找到lock的实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意，在JDK8中，lock()方法分别定义在公平锁与非公平锁的具体实现中，然后在ReentrantLock中调用锁对象的lock()方法，而在JDK10中将lock()方法进行了拆分，这里主要写一下JDK10中的实现，JDK8的实现将在附录中补充。</p></blockquote><p>其中的acquire为Sync类继承的AQS的方法，其主要作用是获取线程的同步状态，若获取同步状态失败，则将线程放入同步队列。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将节点放入同步队列</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node oldTail <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span><span class="token function">setPrevRelaxed</span><span class="token punctuation">(</span>oldTail<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>oldTail<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    oldTail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">return</span> node<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">initializeSyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-1-2、FairSync"><a href="#2-1-2、FairSync" class="headerlink" title="2.1.2、FairSync"></a>2.1.2、FairSync</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ReservedStackAccess</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>与非公平锁相比，公平锁的实现上增加了hasQueuedPredecessors()方法，其主要作用是检测是否有线程比当前线程更早发起锁获取申请，如果有，则从同步队列中取出这个线程，对其进行操作。</p><blockquote><p>参考文章<br><a href="https://www.cnblogs.com/qifengshi/p/6831055.html" target="_blank" rel="noopener">java中锁的分类</a><br><a href="https://baijiahao.baidu.com/s?id=1596097535206742705&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">一张图读懂公平锁与非公平锁</a><br><a href="https://blog.csdn.net/rickiyeat/article/details/78307739" target="_blank" rel="noopener">ReentrantLock与公平锁、非公平锁的实现</a><br><a href="https://blog.csdn.net/u012403290/article/details/64910926?locationNum=11&amp;fps=1" target="_blank" rel="noopener">详解sycronized与Lock的区别与使用</a></p></blockquote><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol><li>JDK1.8中实现lock()的代码</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>同步队列结构是双向链表，在运行过程中为FIFO</li><li>处于等待的线程为休眠状态</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> Java源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编舟记</title>
      <link href="/2018/08/26/fune-wo-amu/"/>
      <url>/2018/08/26/fune-wo-amu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“辞典，是横渡词汇海洋的船，”荒木仿佛倾吐灵魂之声一般娓娓道来，“人们乘坐辞典这艘船，搜集漂浮在漆黑海面上的点点星光。只为了能用最恰当的措辞，准确地把自己的所思所想传达给他人。如果没有辞典，我们只能伫立在这片浩瀚的大海前，驻足不前。”</p></blockquote><a id="more"></a><p>很久没像现在这样静下心来读一本书了。也多亏了昨天的偶然，在钟书阁的书架上看到了这本《编舟记》，蓦的想起之前似乎是在某个电台或是某个视频中听言过三浦紫苑老师的作品，便一时冲动将其买了下来。</p><p>不得不说，这也许是我迄今为止读的最投入的书了，说最投入，其实也不见得，毕竟初中高中时在睡前都能抱着《水浒传》、《三国演义》的厚部头独上几个钟头，但不得不说，自从进入大学后，这种感觉已经少之又少了。无论生活还是阅读，头脑间总有些许堵塞感，身边的事物进入脑海，被独在神经，打了个转，便又不知道从何处飞离开来。</p><p>重新说回这本书，若是让我用一个词来形容书中的人物，那便是“<strong>匠人</strong>”。从头到尾，书中的每一个人物都遵循着自己的信念，有着自己热爱并为之奋斗的事情。</p><p><strong>马缔光也</strong>：沉浸在自我世界中的主角，缺乏社交技能，与周围环境格格不入，但却对词汇、文字具有极强的执念，以至于连情书都写得晦涩难懂，还请同事西冈“指教”。接手辞典《大渡海》的编纂后，花费十五年的光阴，将自己的追求贯彻到底。</p><p><strong>林相具矢</strong>：对料理情有独钟的女主角，为了修行料理宁可放弃即将到来的爱情。在静谧中发现了马缔光也，被他的认真与执着所吸引，也被他对词汇的感知而改变。</p><p><strong>西冈正志</strong>：凡事吊儿郎当的前辞典编辑部编辑，看似处处逢源但内心也有自己柔软的一面，虽然对各种工作都没有兴趣，但却也都尽力将事情做好。这是我在这部书中最喜欢的一个人物，他作为某种程度上的“人生赢家”系的角色，却产生了对木讷、还是处男的马缔的嫉妒。他缺少的并不是生活中的感情或者物质，而是对于自己的认同感，他在辞典编辑部中找不到自己的容身之处，所以在要被调离编辑部，他找到自己在辞典编辑部的意义时，这份心情的转变才弥足珍贵。他细腻的心思更是能够理解每个人的信条，所以在受到教授刁难时，他才能不屈下双膝，而是选择相信同事们的意志。</p><p><strong>松本老师、荒木公平</strong>：松本老师和荒木公平是同一类人，他们热爱辞典，他们是最深刻理解到语言词汇之美的人。两人用了一生的时间来追逐自己热爱的辞典事业，哪怕松本老师病入膏肓，依旧随手拿着词例卡，记录着每一个新奇的词汇。</p><p>其他人也是如此，在第十三年转入辞典编辑部的岸边绿，对辞典编辑部由最初的怀疑到最后的坚持并沉迷其中，造纸厂的宫本先生多次修改，只为了制作出适合《大渡海》的轻薄而富有滑润感的极品纸……作者用马缔光也的经历将这些人物串联起来，这些人潜移默化中改变着马缔，马缔也用自己的方式改变着他们。</p><center><img src="/2018/08/26/fune-wo-amu/book.jpg" width="50%"></center><p>整部书251页，昨天买来之后读起来一气呵成，只用了半天时间便阅读完毕，之前听说这本书还被改编成了动画，便在晚上找了出来仔细看了一下。动画版在改编上还算成功，质量也算过硬，颇有些小清新文艺动画的感觉。但动画看完，总觉得缺了些什么，也许是动画集数的限制，很多剧情略有删减，但被删减的却恰巧是我最喜欢的那部分。</p><p>西冈在得知要调动部门时，他对马缔那种深藏心底的嫉妒与自身的矛盾在心底持续发酵，在这时他相交多点但无名无分的“女性朋友”、“丑女朋友”却成了他唯一的精神支柱，在这段时间，他慢慢找到了自己的价值，也认识到了自己对“丑女”的爱情，这些在动画中却提及的并不多，也比较零碎。</p><p>也许正是因为原作者对西冈的刻意描写，在独到一般时，支撑我读下去的人早已不只是主角，而是西冈，也许正是在众多的具有坚定梦想、明确目标的人中，这个迷茫却高尚的人才会如此熠熠生辉吧。</p><blockquote><p>我不会像教授那样，对工作敷衍了事，在辞典上徒留虚名。无论我去了哪个部门，也要为《大渡海》而竭尽所能。留不留名无所谓。即使我在编辑部待过的痕迹被抹除，即使有一天从马缔嘴里听到：“西冈？说起来是有这样一个人。”我也不在乎。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找树</title>
      <link href="/2018/05/26/binary-search-tree/"/>
      <url>/2018/05/26/binary-search-tree/</url>
      
        <content type="html"><![CDATA[<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>二叉树是在程序设计中经常用到的数据结构之一，我们在数据结构中经常说的<strong>堆</strong>结构就是一种二叉树。二叉树与通常的树不同的是它规定每个节点最多只能拥有两个子节点。</p><a id="more"></a><h6 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h6><p><strong>完全二叉树</strong>是二叉树的一种形态，它要求除了最后一层外，其余层必须完全填充，且有子节点的节点的度数必须为2。其叶子节点均靠左对其。</p><center><img src="/2018/05/26/binary-search-tree/CompleteBinaryTree.png" style="width:50%;"></center><h6 id="完满二叉树"><a href="#完满二叉树" class="headerlink" title="完满二叉树"></a>完满二叉树</h6><p><strong>完满二叉树</strong>要求比完全二叉树低，它仅要求所有的非叶子节点的度数为2，即所有有子节点的节点都必须有两个子节点。</p><center><img src="/2018/05/26/binary-search-tree/FullBinaryTree.png" style="width:50%;"></center><h6 id="完美二叉树"><a href="#完美二叉树" class="headerlink" title="完美二叉树"></a>完美二叉树</h6><p><strong>完美二叉树</strong>又被称为<strong>满二叉树</strong>。顾名思义，其要求所有层都需要完全填充。此时深度为h的满二叉树的节点数为$$2^{h} - 1$$</p><center><img src="/2018/05/26/binary-search-tree/PerfectBinaryTree.png" style="width:50%;"></center><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><p><strong>二叉查找树</strong>又被称为<strong>二叉排序树</strong>。是一种特殊的二叉树，它并不要求一定是完满二叉树还是满二叉树，它只要求节点的值大于其左子节点，小于其右子节点。</p><p><img src="/2018/05/26/binary-search-tree/BinarySearchTree" alt="二叉查找树"></p><p>由上图可以看出，二叉查找树在进行二叉树查找时，基本遵循的是二分查找的思想。它的算法复杂度为$$O(logn)$$一棵深度为h的二叉查找树，我们也可以说它的算法复杂度为$$O(h)$$</p><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p><strong>平衡二叉树</strong>是一种能够在构建二叉树时完成自平衡性的二叉查找树。</p><p>传统的二叉查找树虽然算法复杂度达到了O(logn)，但当二叉查找树构建时，节点过度偏向于一侧时，它的算法复杂度可能会被退化为O(n)，即退化为链表。</p><p>如下图</p><center><img src="/2018/05/26/binary-search-tree/二叉查找退化.png" style="width:50%;"></center><h6 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h6><p><strong>AVL树</strong>即是传统平衡二叉树，它具有以下两个性质：</p><ol><li>节点两边的高度差不大于1.</li><li>节点的子树也为AVL树。</li></ol><p>如下图，我们用上面的红数字来记录该节点左子树与右子树的层数差，现在最大层数差的绝对值不超过1，故我们称它现在处于平衡状态。</p><center><img src="/2018/05/26/binary-search-tree/AVLtreeBase.png" style="width:50%;"></center><p>我们可以考虑，不平衡状态有以下四种情况：</p><p><img src="/2018/05/26/binary-search-tree/leftleft.png" style="width:25%;float:left"></p><p><img src="/2018/05/26/binary-search-tree/leftright.png" style="width:25%;float:left"></p><p><img src="/2018/05/26/binary-search-tree/rightleft.png" style="width:25%;float:left"></p><p><img src="/2018/05/26/binary-search-tree/rightright.png" style="width:25%;"></p><p>分别是：</p><ol><li>向左子树的左节点添加元素导致不平衡</li><li>向左子树的右节点添加元素导致不平衡</li><li>向右子树的左节点添加元素导致不平衡</li><li>向右子树的右节点添加元素导致不平衡</li></ol><p>也就是<strong>左左</strong>、<strong>左右</strong>、<strong>右左</strong>、<strong>右右</strong>。</p><p>为了让它查找时的算法复杂度最低，我们需要对整个平衡树进行旋转。</p><p><strong>单旋转</strong></p><center><img src="/2018/05/26/binary-search-tree/单旋转.png" style="width:25%;"></center><p>当平衡树左子树较重时，需要右旋，将左子树的根节点作为新根节点，将左子树根节点的右子节点作为原根节点的左子节点。</p><p>当平衡树右子树较重时，需要左旋，将右子树的根节点作为新根节点，将右子树根节点的左子节点作为原根节点的右子节点。</p><p>单旋转适用于左左、右右的情况。</p><p><strong>双旋转</strong></p><center><img src="/2018/05/26/binary-search-tree/双旋转.png" style="width:25%;"></center><p>双旋转就是先将较重子树进行一次单旋转，然后总体再进行一次单旋转，这样一共进行两次旋转使树成为平衡状态。</p><p><strong>删除节点</strong></p><p>由于二叉树节点的删除也会破坏其平衡性，所以在进行删除时，主要使用以下方式：</p><p>若要删除的节点的左右子树非空，则选取其深度最大的子树，将子树中的最大（最小）值赋值给根节点，然后删除子树中最大（最小）值的节点。</p><p>假设要删除根节点：</p><center><img src="/2018/05/26/binary-search-tree/删除节点.png" style="width:25%;"></center><p>在删除结束后，要判断当前的树是否平衡，若不平衡，则进行旋转。</p><p>VAL树的插入、删除、查询时间复杂度均为$$O(logn)$$</p><h6 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h6><p><strong>红黑树</strong>(RB-tree)是通过颜色来维持二叉树平衡的树，它必须遵守以下五点规则：</p><ol><li>每个结点都只能是红色或者黑色中的一种。</li><li>根结点是黑色的。</li><li>每个叶结点（NIL节点，空节点）是黑色的。</li><li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li><li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li></ol><center><img src="/2018/05/26/binary-search-tree/红黑树.png"></center><p>当我们插入数据时，如果插入的节点颜色为黑色，则一定会违背规则3，所以我们默认插入的节点为红色。在我们插入数据时，我们判断插入后的红黑树是否违背以上的五个规则，如果违背，则要对其进行调整，也就是旋转和着色。</p><ol><li>插入到一个空的树，插入结点则为根结点，只需要将红色结点重新转染成黑色结点来满足性质2；</li><li>新结点的父结点为黑色，满足所有条件；</li><li>新结点的父结点为红色，因为性质2和性质4，所以树必然有祖父结点，则又包括以下的情况：</li><li>父亲结点和叔父结点均为红色，显然无法满足性质4，则将父亲结点和叔父结点绘制成黑色，祖父结点设置成红色，但是仍然无法满足情况，比如考虑到祖父结点可能是根结点，则无法满足性质2，或者祖父结点的父结点是红色的，则无法满足性质4，这时需要将祖父结点作为新的结点来看待进行各种情况的判断，涉及到对祖父结点的递归；</li><li>父亲结点为红色同时叔父结点为黑色或者从缺，这里又分为两种情况，新插入结点为父亲结点的左子结点和右子结点（假设其中父亲结点为祖父结点的左子结点），区别在于旋转的方向，显然，这棵树父亲结点既然为红色，那么其祖父结点则为黑色（性质4），不然无法满足前提。</li><li>新插入结点为父亲结点的左子结点，那么就构成了一个左左的情况，在之前平衡树中提到过，如果要将其进行平衡，则需要对父结点进行一次单右旋转，形成一个父亲结点为相对根结点，子结点和祖父结点为子结点的树，同时将父亲结点的红色改为黑色，祖父结点更改为红色，这下之前无法满足的性质4和性质5就满足了；</li><li>新插入结点为父亲结点的右子结点，那么就会构成一个左右的情况，在之前的平衡树也提到过要进行一次双旋转，先对新结点进行一次单左旋转，变成了左左的结构，再进行一次单右旋转，从而达到满足所有性质；</li><li>父亲结点是祖父结点的右结点，参考平衡树进行相应的操作，原理是一致的</li></ol><blockquote><p>红黑树</p><p><a href="https://www.cnblogs.com/George1994/p/6903437.html" target="_blank" rel="noopener">红黑树</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的排序算法</title>
      <link href="/2018/05/14/sort-algorithm/"/>
      <url>/2018/05/14/sort-algorithm/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/05/14/sort-algorithm/sort-algorithm-list.png" alt=""></p><h2 id="1">简单选择排序</h2><p>在java编程中我们经常遇到排序问题，在我们刚刚学习编程时，我们通常使用的是以下的方式进行排序：</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      temp <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种排序方式就是我们最基础的<strong>选择排序</strong>。</p><p>选择排序的思想是所有排序算法中最简单易懂的：<strong>循环找出数组中最小的数置于最前。</strong>但选择排序存在两点缺陷：</p><ul><li>有许多不必要的数据交换操作</li></ul><blockquote><p>例如：将数组{3,1,5,4,0}进行升序排序，使用选择排序需要经历以下步骤</p><ol><li>{1,3,5,4,0} 将3与1进行交换</li><li>{1,3,5,4,0} 5大于1，不进行交换</li><li>{1,3,5,4,0} 4大于1，不进行交换</li><li>{0,3,5,4,1} 0小于1，进行交换操作</li></ol><p>到这里就会发现，在执行到第四步时，只因为0大于1，就将0置于最后，而我们需要的操作仅仅是将0置于最前。这样即增加了之后的操作数，也增加了交换次数。</p></blockquote><ul><li>不稳定排序算法</li></ul><blockquote><p>当数组中的相同值在排序后的相对位置不变时，我们说这种排序算法是稳定排序算法。</p><p>在选择排序中，举例：{3,3,1}<br>我们在进行排序时，会将第一个3与1进行交换，两个3的相对位置发生了改变，故说它是不稳定排序算法。</p></blockquote><p><strong><em>算法复杂度：$O(n^2)$</em></strong></p><p><strong><em>循环次数：$\frac{n(n-1)}{2}$</em></strong></p><hr><h2 id="2">冒泡排序</h2><p>冒泡排序的思想也比较简单，也是像选择排序一样存在两个循环。在第一次循环时，从倒数第二个元素比较到第一个元素，若当前元素的值，与当前元素+1位置的值不构成排序关系时，就将两元素进行交换。第二次循环从倒数第二个元素比较到第二个元素……依次类推。</p><p>假设数组{21,34,12,34,78,12,34}，要使用冒泡排序进行由小到大排序，则会经历以下步骤：</p><ol><li>{21,34,12,34,78,<font color="red">12</font>,<font color="red">34</font>}</li><li>{21,34,12,34,<font color="red">12</font>,<font color="red">78</font>,34}</li><li>{21,34,12,<font color="red">12</font>,<font color="red">34</font>,78,34}</li><li>{21,34,<font color="red">12</font>,<font color="red">12</font>,34,78,34}</li><li>{21,<font color="red">12</font>,<font color="red">34</font>,12,34,78,34}</li><li>{<font color="red">12</font>,<font color="red">21</font>,34,12,34,78,34}</li></ol><p>……<br>可以看出，整个排序过程中，最小的元素像冒泡一样从最后浮到的最前，所以这种排序算法被称为<strong>冒泡排序</strong>。</p><p>将这种算法落实到代码上就是：</p><pre class=" language-Java"><code class="language-Java">for(int i = 0;i < data.length - 1;i++){  for(int j = data.length - 2;j >= i;j--){    if(data[j] > data[j + 1]){      int temp = data[j];      data[j] = data[j+1];      data[j+1] = temp;    }  }}</code></pre><p>当然，这时从后向前的冒泡排序，根据同样的理论，我们也可以写出从前往后的冒泡操作：</p><pre class=" language-Java"><code class="language-Java">for(int i = 0;i < data.length - 1;i++){  for(int j = 0;j < data.length - 1 - i;j++){    if(data[j] > data[j + 1]){      int temp = data[j];      data[j] = data[j+1];      data[j+1] = temp;    }  }}</code></pre><p>与选择排序不同，冒泡排序的操作中必然会导致两相同元素靠在一起，这时我们不对相同元素进行位置交换，则排序结束后相同元素的相对位置不变，故冒泡排序是一种<strong>稳定排序算法</strong>。</p><h6 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h6><p>当n个元素的数组排序开始时就是顺序排列，则需要进行n - 1次比较、0次移动即可完成整个排序,此时的比较次数C和移动次数M最小：</p><p>$$C_{min} = n - 1$$</p><p>$$M_{min} = 0$$</p><p>故冒泡排序最好算法复杂度为<strong><em>$$O(n)$$</em></strong></p><p>当数组排序开始时是逆序排列，则需要进行n-1次循环，第i次循环需要进行n-1-i次比较，每次比较需要进行三次移动，此时当比较次数和移动次数最大：</p><p>$$C_{max} = \frac{n(n-1)}{2} = O(n^2)$$</p><p>$$M_{max} = \frac{3n(n-1)}{2} = O(n^2)$$</p><p>故冒泡排序最坏算法复杂度为<strong><em>$$O(n^2)$$</em></strong></p><p>因此，冒泡排序算法当平均算法复杂度为<strong><em>$$O(n^2)$$</em></strong></p><hr><h2 id="3">快速排序</h2><p>快速排序与冒泡排序都属于<strong>交换排序</strong>。快速排序是对冒泡排序对一种优化。快速排序对主要思想是<strong>挖坑填数</strong>和<strong>分治法</strong>。</p><blockquote><p><strong>分治法</strong>就是将需要解决的问题转化为更小的子问题，并将子问题逐个击破，将子问题的解进行合并，合并为原问题的解。</p></blockquote><p>快速排序的基本原理是：在需要排序的数组中选取一个数作为<strong>基准数</strong>，通过两个游标分别从左向右、从右向左进行扫描，将达成排序关系A的放在基准数左边，达成排序关系B的放在基准数右边。然后左右分串再次进行类似操作。</p><p>下面举一个例子进行详细说明：</p><p>欲使用快速排序对数组{12,3,22,51,13,7,10,11}进行升序排序：</p><p>1.</p><table><thead><tr><th style="text-align:center">基准数</th><th style="text-align:center">i</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">j</th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">3</td><td style="text-align:center">22</td><td style="text-align:center">51</td><td style="text-align:center">13</td><td style="text-align:center">7</td><td style="text-align:center">10</td><td style="text-align:center">11</td></tr></tbody></table><p>首先要选择基准数，为了方便起见，我们使用数组第一个值为基准数，这时设置两个游标i和j，分别从左向右、从右向左进行扫描。</p><p>2.</p><table><thead><tr><th style="text-align:center">基准数</th><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">j</th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">3</td><td style="text-align:center"><font color="red">22</font></td><td style="text-align:center">51</td><td style="text-align:center">13</td><td style="text-align:center">7</td><td style="text-align:center">10</td><td style="text-align:center"><font color="red">11</font></td></tr></tbody></table><p>此时，i移动到22时，22大于基准数12，故停止扫描，j开始移动。j移动到11时，发现11小于基准数12，故停止扫描。</p><p>3.</p><table><thead><tr><th style="text-align:center">基准数</th><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">j</th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">3</td><td style="text-align:center"><font color="red">11</font></td><td style="text-align:center">51</td><td style="text-align:center">13</td><td style="text-align:center">7</td><td style="text-align:center">10</td><td style="text-align:center"><font color="red">22</font></td></tr></tbody></table><p>将两个数进行交换，交换后，继续从i开始扫描，并重复之前的操作。</p><p>4.</p><table><thead><tr><th style="text-align:center">基准数</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">j</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">3</td><td style="text-align:center">11</td><td style="text-align:center"><font color="red">10</font></td><td style="text-align:center">13</td><td style="text-align:center">7</td><td style="text-align:center"><font color="red">51</font></td><td style="text-align:center">22</td></tr></tbody></table><p>10和51进行了交换。</p><p>5.</p><table><thead><tr><th style="text-align:center">基准数</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center">j</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">3</td><td style="text-align:center">11</td><td style="text-align:center">10</td><td style="text-align:center"><font color="red">7</font></td><td style="text-align:center"><font color="red">13</font></td><td style="text-align:center">51</td><td style="text-align:center">22</td></tr></tbody></table><p>7和13进行了交换。</p><p>6.</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center">i</th><th style="text-align:center">j</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">7</font></td><td style="text-align:center">3</td><td style="text-align:center">11</td><td style="text-align:center">10</td><td style="text-align:center"><font color="red">12</font></td><td style="text-align:center">13</td><td style="text-align:center">51</td><td style="text-align:center">22</td></tr></tbody></table><p>当i和j相遇时，将基准数与i交换，此时基准数左边都是小于12的数，右边都是大于12的数。再将左右的数分成两个字串，使用递归再次进行之前的操作，知道字串不能再分，则完成了排序。</p><h5 id="基准数的选择"><a href="#基准数的选择" class="headerlink" title="基准数的选择"></a>基准数的选择</h5><p>在我们通常情况下，基准数的选择主要有以下几种方式：</p><ol><li>使用第一个或最后一个数作为基准数，这种选择方式比较方便，但当遇到原本就是正序或倒序排列的数组时，就会降低算法性能。</li><li>随机选取数字作为基准数，这种选取方式较为安全。</li><li>三数取中，将第一个数、最后一个数、中间的数排列后取中值，也在一定程度上减少了复杂化的危险性。</li></ol><p>以下使用三数取中法为例：</p><pre class=" language-Java"><code class="language-Java">public class Main{    public static void main(String[] args) {        int[] data = new int[]{12,3,22,51,13,7,10,11};        quicksort(data,0,data.length - 1);        System.out.println(Arrays.toString(data));    }    public static void quicksort(int[] data,int left,int right){        if(left >= right)            return;        int medium = (left + right) / 2;    //求出中值的位置        if(data[left] > data[right])    //保证左端的值较小            swap(data,left,right);        if(data[medium] > data[right])  //保证中间的值较小            swap(data,medium,right);        if(data[medium] > data[left])   //保证左端的值为中值            swap(data,medium,left);        int pivotvalue = data[left];        int i = left;        int j = right;        while(i < j){            while(data[i] <= pivotvalue && i < j)                i++;            while(data[j] >= pivotvalue && i < j)                j--;            if(i < j)                swap(data,i,j);        }        int temp = 0;        if(data[i] > data[left])    //判断游标值大小            temp = i - 1;        else            temp = i;        swap(data,temp,left);        quicksort(data,left,temp - 1);        quicksort(data,temp + 1,right);    }    public static void swap(int[] data,int a,int b){        int temp = data[a];        data[a] = data[b];        data[b] = temp;    }}</code></pre><p>平均算法复杂度：$O(nlogn)$</p><hr><h2 id="4">堆排序</h2><p><strong>堆排序</strong>主要针对的是“堆”这种数据结构。它是一种<strong>选择排序</strong>。</p><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><p><strong>堆（heap）</strong>是计算机科学中的一类数据结构，它的表现形式是一棵<strong>完全二叉树</strong>的<strong>层序遍历数组</strong>。</p><p>堆结构与完全二叉树的不同在于：</p><ul><li>堆中的节点总是不大于或不小于其父节点的值，即堆结构存在<strong>有序性</strong>。</li></ul><p>所以我们可以说：</p><ul><li>堆一定是完全二叉树。</li><li>完全二叉树不一定是堆。</li></ul><p>堆通常分为两种：根节点为最小值的堆为<strong>小根堆</strong>（最小堆），根节点为最大值的堆为<strong>大根堆</strong>（最大堆）。</p><p><img src="/2018/05/14/sort-algorithm/小跟堆.png" alt="小跟堆"><br><img src="/2018/05/14/sort-algorithm/大跟堆.png" alt="大跟堆"></p><p>堆排序的主要原理为：</p><ol><li>从下向上遍历每个非叶节点，使它与子节点形成堆关系。</li><li>将根节点与最后一个节点进行互换，此时数组最后一位为最大/最小值。</li><li>将除去原根节点之外的数据重复以上操作，逐步将每次的最大/最小值沉入数组后方，完成排序。</li></ol><p>下面使用图示进行详细讲解：</p><p>例如，需要排序的数组为{12,3,5,14,8},我们使用堆排序进行升序排序，我们首先将数组构建为如下二叉树：</p><p><img src="/2018/05/14/sort-algorithm/堆排序01.png" alt="堆排序01"></p><p>因为是升序排序，所以我们考虑构建大根堆，首先找到最后的非叶节点，将它与两子节点节点进行比较，最大值交换到当前位置：</p><p><img src="/2018/05/14/sort-algorithm/堆排序02.png" alt="堆排序02"></p><p>然后继续向上寻找非叶节点，此时非叶节点为跟节点，重复之前的操作：</p><p><img src="/2018/05/14/sort-algorithm/堆排序03.png" alt="堆排序03"></p><p>我们将此时的根节点，也就是数组中的最大值与最后一个节点进行交换：</p><p><img src="/2018/05/14/sort-algorithm/堆排序04.png" alt="堆排序04"></p><p>此时的数组也就变成了{8,12,5,3,14},数组的最大值沉到了最后一位。接下来，不考虑最后一位，继续重复之前操作，即可完成排序。</p><p>使用代码实现如下：</p><pre class=" language-Java"><code class="language-Java">public class Main{    public static void main(String[] args) {        int[] data = new int[]{12,3,22,51,13,7,10};        sort(data);        System.out.println(Arrays.toString(data));    }    public static void sort(int []arr){        //1.构建大顶堆        for(int i=arr.length/2-1;i>=0;i--){            //从第一个非叶子结点从下至上，从右至左调整结构            adjustHeap(arr,i,arr.length);        }        //2.调整堆结构+交换堆顶元素与末尾元素        for(int j=arr.length-1;j>0;j--){            swap(arr,0,j);//将堆顶元素与末尾元素进行交换            adjustHeap(arr,0,j);//重新对堆进行调整        }    }    /**     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）     * @param arr     * @param i     * @param length     */    public static void adjustHeap(int []arr,int i,int length){        int temp = arr[i];//先取出当前元素i        for(int k=i*2+1;k<length;k=k*2+1){//从i结点的左子结点开始，也就是2i+1处开始            if(k+1<length && arr[k]<arr[k+1]){//如果左子结点小于右子结点，k指向右子结点                k++;            }            if(arr[k] >temp){//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）                arr[i] = arr[k];                i = k;            }else{                break;            }        }        arr[i] = temp;//将temp值放到最终的位置    }    /**     * 交换元素     * @param arr     * @param a     * @param b     */    public static void swap(int []arr,int a ,int b){        int temp=arr[a];        arr[a] = arr[b];        arr[b] = temp;    }}</code></pre><p>可以看出，虽然此算法叫<strong>堆排序</strong>，但实际上经过调整，对不构成完全二叉树的数据依旧可以进行排序。</p><p>堆排序算法的最优、最差、平均算法复杂度均为：$O(nlogn)$</p><p>堆排序与基本选择排序一样，均为<strong>不稳定排序算法</strong>。</p><blockquote><p>参考文章：<br><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">图解排序算法（三）之堆排序</a></p></blockquote><hr><h2 id="5">简单插入排序</h2><p><strong>简单插入排序</strong>又称<strong>直接插入排序</strong>，也是一种较为简单的排序方式。</p><p>它的主要思路是，将数组中元素，依次放入有序表中，每次插入新元素，就将它与已有元素进行比较，将排序逻辑靠后的元素位置加一，将新元素插入。</p><p>代码如下：</p><pre class=" language-Java"><code class="language-Java">public class Main{    public static void main(String[] args) {        int[] data = new int[]{12,3,22,51,13,7,10};        data = simpleInsertSort(data);        System.out.println(Arrays.toString(data));    }    private static int[] simpleInsertSort(int[] data) {        if(data.length <= 1)            return data;        int[] result = new int[data.length];        result[0] = data[0];        for(int i = 1;i < data.length;i++){            int pos = 0;            for(int j = i - 1; j >= 0 ;j--){                if(result[j] <= data[i]) {                    pos = j + 1;                    break;                }                else                    result[j + 1] = result[j];            }            result[pos] = data[i];        }        return result;    }}</code></pre><p>当原数组为正序时，每次插入都只需要比较一次，所以最优算法复杂度为：$O(n)$</p><p>当原数组为倒序时，每次插入都需要与之前当所有数据进行比较，所以最差算法复杂度为：$1+2+3+…+(n-1) = \frac{1+(n-1)}{2} \times n =O(n^2)$</p><p>平均算法复杂度为：$O(n^2)$</p><hr><h2 id="6">希尔排序</h2><p><strong>希尔排序</strong>是对简单插入排序的一种优化排序算法，也被称为<strong>减小增量排序</strong>，它是最早突破$$O(n^2)$$复杂度的一批算法。</p><p>希尔排序的主要思路是：首先选定一个增量，按照增量来将原有数组划分为多个子数组，分别将各个子数组进行插入排序，然后不断减少增量，重复之前的步骤，直到增量减小为1时完成排序。</p><p>图解如下：</p><table><thead><tr><th style="text-align:center">增量为4</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="blue">3</font></td><td style="text-align:center"><font color="green">1</font></td><td style="text-align:center"><font color="black">6</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="blue">2</font></td><td style="text-align:center"><font color="green">8</font></td><td style="text-align:center"><font color="black">7</font></td></tr></tbody></table><table><thead><tr><th style="text-align:center">第一次排序</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="blue">2</font></td><td style="text-align:center"><font color="green">1</font></td><td style="text-align:center"><font color="black">6</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="blue">3</font></td><td style="text-align:center"><font color="green">8</font></td><td style="text-align:center"><font color="black">7</font></td></tr></tbody></table><table><thead><tr><th style="text-align:center">增量为2</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="blue">2</font></td><td style="text-align:center"><font color="red">1</font></td><td style="text-align:center"><font color="blue">6</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="blue">3</font></td><td style="text-align:center"><font color="red">8</font></td><td style="text-align:center"><font color="blue">7</font></td></tr></tbody></table><table><thead><tr><th style="text-align:center">第二次排序</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">1</font></td><td style="text-align:center"><font color="blue">2</font></td><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="blue">3</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="blue">6</font></td><td style="text-align:center"><font color="red">8</font></td><td style="text-align:center"><font color="blue">7</font></td></tr></tbody></table><table><thead><tr><th style="text-align:center">增量为1</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">1</font></td><td style="text-align:center"><font color="red">2</font></td><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="red">3</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="red">6</font></td><td style="text-align:center"><font color="red">8</font></td><td style="text-align:center"><font color="red">7</font></td></tr></tbody></table><table><thead><tr><th style="text-align:center">第三次排序</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><font color="red">1</font></td><td style="text-align:center"><font color="red">2</font></td><td style="text-align:center"><font color="red">3</font></td><td style="text-align:center"><font color="red">4</font></td><td style="text-align:center"><font color="red">5</font></td><td style="text-align:center"><font color="red">6</font></td><td style="text-align:center"><font color="red">7</font></td><td style="text-align:center"><font color="red">8</font></td></tr></tbody></table><h6 id="增量的选择"><a href="#增量的选择" class="headerlink" title="增量的选择"></a>增量的选择</h6><p>增量的选择与减小规则应该按照实际情况进行规划，我们这里使用最简单的方式：初始增量为数组长度的一般，每次增量减小为原先增量的一半。在进行分段排序时，我们可以使用有序数组插入的方式，也可以使用交换方式。</p><pre class=" language-Java"><code class="language-Java">public class ShellSort {    public static void main(String []args){        int []arr ={1,4,2,7,9,8,3,6};        sort(arr);        System.out.println(Arrays.toString(arr));        int []arr1 ={1,4,2,7,9,8,3,6};        sort1(arr1);        System.out.println(Arrays.toString(arr1));    }    /**     * 希尔排序 针对有序序列在插入时采用交换法     * @param arr     */    public static void sort(int []arr){        //增量gap，并逐步缩小增量       for(int gap=arr.length/2;gap>0;gap/=2){           //从第gap个元素，逐个对其所在组进行直接插入排序操作           for(int i=gap;i<arr.length;i++){               int j = i;               while(j-gap>=0 && arr[j]<arr[j-gap]){                   //插入排序采用交换法                   swap(arr,j,j-gap);                   j-=gap;               }           }       }    }    /**     * 希尔排序 针对有序序列在插入时采用移动法。     * @param arr     */    public static void sort1(int []arr){        //增量gap，并逐步缩小增量        for(int gap=arr.length/2;gap>0;gap/=2){            //从第gap个元素，逐个对其所在组进行直接插入排序操作            for(int i=gap;i<arr.length;i++){                int j = i;                int temp = arr[j];                if(arr[j]<arr[j-gap]){                    while(j-gap>=0 && temp<arr[j-gap]){                        //移动法                        arr[j] = arr[j-gap];                        j-=gap;                    }                    arr[j] = temp;                }            }        }    }    /**     * 交换数组元素     * @param arr     * @param a     * @param b     */    public static void swap(int []arr,int a,int b){        arr[a] = arr[a]+arr[b];        arr[b] = arr[a]-arr[b];        arr[a] = arr[a]-arr[b];    }}</code></pre><p>其最坏时间复杂度依然为$O(n^2)$，一些经过优化的增量序列如Hibbard经过复杂证明可使得最坏时间复杂度为$O(n^{\frac{3}{2}})$</p><blockquote><p>本段参考：</p><p><a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">图解排序算法(二)之希尔排序</a></p></blockquote><h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><table><thead><tr><th>更新时间</th><th>更新内容</th></tr></thead><tbody><tr><td>2018年5月14日</td><td>选择排序</td></tr><tr><td>2018年5月15日</td><td>冒泡排序</td></tr><tr><td>2018年5月16日</td><td>快速排序</td></tr><tr><td>2018年5月17日</td><td>堆排序</td></tr><tr><td>2018年5月17日</td><td>简单插入排序</td></tr><tr><td>2018年5月23日</td><td>希尔排序</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
